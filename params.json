{
  "name": "Carma pack",
  "tagline": "MCMC Sampler for Performing Bayesian Inference on Continuous Time Autoregressive Models.",
  "body": "carma_pack\r\n========\r\n\r\ncarma_pack is an MCMC sampler for performing Bayesian inference on\r\ncontinuous time autoregressive moving average models. These models may\r\nbe used to model time series with irregular sampling. The MCMC sampler\r\nutilizes an adaptive Metropolis algorithm combined with parallel\r\ntempering. Further details are given in [this paper](http://arxiv.org/abs/1402.5978).\r\n\r\nFor a guided tour of `carma_pack` click [here](http://nbviewer.ipython.org/github/brandonckelly/carma_pack/blob/master/examples/.ipynb_checkpoints/carma_pack_guide-checkpoint.ipynb)\r\n or see the `ipython` notebook available under the `examples/` folder.\r\n\r\n----------\r\nQuick Start\r\n----------\r\n\r\nTo illustrate the important functionality of carma_pack, start by\r\ndefining the power spectrum parameters for a CARMA(5,3) process:\r\n\r\n    >>> import carmcmc as cm\r\n    >>> import numpy as np\r\n    >>>\r\n    >>> sigmay = 2.3  # dispersion in the time series\r\n    >>> p = 5  # order of the AR polynomial\r\n    >>> mu = 17.0  # mean of the time series\r\n    >>> qpo_width = np.array([1.0/100.0, 1.0/300.0, 1.0/200.0])  # widths of of Lorentzian components\r\n    >>> qpo_cent = np.array([1.0/5.0, 1.0/25.0])  # centroids of Lorentzian components\r\n    >>> ar_roots = cm.get_ar_roots(qpo_width, qpo_cent)\r\n    >>> ma_coefs = np.zeros(p)\r\n    >>> ma_coefs[0] = 1.0\r\n    >>> ma_coefs[1] = 4.5\r\n    >>> ma_coefs[2] = 1.25\r\n    >>> # calculate amplitude of driving white noise\r\n    >>> sigsqr = sigmay ** 2 / cm.carma_variance(1.0, ar_roots, ma_coefs=ma_coefs)\r\n\r\nGenerate the time series:\r\n\r\n    >>> ny = 270\r\n    >>> time = np.empty(ny)\r\n    >>> dt = np.random.uniform(1.0, 3.0, ny)\r\n    >>> time[:90] = np.cumsum(dt[:90])\r\n    >>> time[90:2*90] = 180 + time[90-1] + np.cumsum(dt[90:2*90])\r\n    >>> time[2*90:] = 180 + time[2*90-1] + np.cumsum(dt[2*90:])\r\n    >>> y0 = mu + cm.carma_process(time, sigsqr, ar_roots, ma_coefs=ma_coefs)\r\n    >>> ysig = np.ones(ny) * y.std() / 5.0  # standard deviation in measurement noise\r\n    >>> y = y0 + ysig * np.random.standard_norma(ny)  # add measurement noise\r\n\r\nNow lets choose the order of the CARMA model to use. carma_pack does\r\nthis by finding the maximum-likelihood estimate of the carma models on\r\na grid of (p,q), and then choosing (p,q) to minimize the AICc. Because\r\nthe likelihood space is multimodal, carma_pack launches 100 optimizers\r\nwith random starts, and picks the best one. Optimization is done using\r\nscipy.optimize, but appears to be unstable as it is not uncommon to\r\nget NaN at the MLE.\r\n\r\n    >>> carma_model = cm.CarmaModel(time, y, ysig)  # create new CARMA process model\r\n    >>> pmax = 7  # only search over p < 7, q < p\r\n    >>> # njobs = -1 will use all the processes through the multiprocessing module\r\n    >>> MLE, pqlist, AICc_list = carma_model.choose_order(pmax, njobs=-1)\r\n\r\nThe chosen p and q values are saved as data members of the carma_model\r\nobject. Finally, lets sample the CARMA process parameters using MCMC\r\nand the values of (p,q) chosen by the choose_order method.\r\n\r\n    >>> carma_sample = carma_model.run_mcmc(50000)\r\n\r\nThis will run the MCMC sampler for 75000 iterations, with the first\r\n25000 of those discarded as burn-in. You can specify the number of\r\nparallel chains to use in the parallel tempering algorithm, as well as\r\nthe number of iterations used by burn-in. In this example we just use\r\nthe default.\r\n\r\nNow let's examine the results. We can see which parameters we have\r\nsampled as\r\n\r\n    >>> print carma_sample.parameters\r\n\r\nWe can grab the samples for a parameter doing\r\n\r\n    >>> trace_qpo_cent = carma_sample.get_samples('psd_centroid')  # get samples for the Lorentzians centroids\r\n\r\nWe can plot a useful summary of the MCMC samples for each\r\nparameter:\r\n\r\n    >>> carma_sample.plot_parameter('var')  # plots for the CARMA model variance\r\n\r\nWe can also plot 1-d and 2-d posteriors:\r\n\r\n    >>> carma_sample.plot_1dpdf('ma_coefs')  # histograms of MA coefficients\r\n    >>> # plot distribution of centroid of 1st Lorentzian vs width of 2nd Lorentzian\r\n    >>> carma_sample.plot_2dkde('psd_centroid', 'psd_width', 0, 1)\r\n\r\nThe pointwise 95% credibility region for the power spectrum under the\r\nCARMA model is\r\n\r\n    >>> psd_lo, psd_hi, psd_mid, freq = carma_sample.plot_power_spectrum(percentile=95.0, nsamples=5000)  # only use 5000 MCMC samples for speed\r\n\r\nFinally, we can assess the quality of the fit through\r\n\r\n    >>> carma_sample.assess_fit()\r\n\r\n------------\r\nInstallation\r\n------------\r\n\r\n`carma_pack` depends on the following python modules:\r\n\r\n* `numpy`     (for core functionality)\r\n* `scipy`     (for core functionality)\r\n* `matplotlib`    (for generating plots)\r\n* `acor`    (for calculating the autocorrelation time scale of MCMC samples)\r\n\r\nIn addition, it is necessary to have the [Boost C++ libraries](http://www.boost.org) (for\r\nlinking python and C++) and the [Armadillo C++ linear algebra\r\nlibrary](http://arma.sourceforge.net) installed. If you have multiple python\r\nversions installed on your system, make sure that the BoostPython\r\nlinks to the correct python library. Otherwise, python will crash\r\nwhen you import carmcmc.\r\n\r\nFull install directions are given in the Linux_install.txt and\r\nMacOSX_install.txt files. Be forewarned that on Mac OS X getting\r\nBoostPython to build against any python other than the system\r\npython can be a real headache. You may have to replace some of the\r\npython libraries in /usr/lib with symbolic links to the actual python\r\nlibraries used.\r\n\r\n--------\r\nExamples\r\n--------\r\n\r\nWe have supplied an `ipython` notebook under the `examples/` folder that gives a guided tour of `carma_pack`. Also, the script carma_pack/src/paper/carma_paper.py generates the plots\r\nfrom the paper and provides additional examples of carma_pack's functionality.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}